// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Gateway.Automation.Client
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    internal partial interface IGatewayClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Retrieve all gateway apis
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='provider'>
        /// Limit to APIs for this provider
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ApiListModel>>> GetAllApisWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid? provider = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Adds an api if versionsetid is null and adds a version if
        /// versionsetid is not null
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='path'>
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='openApiSpec'>
        /// </param>
        /// <param name='apiVersionSetId'>
        /// Versionset ID
        /// </param>
        /// <param name='providerId'>
        /// </param>
        /// <param name='visibility'>
        /// Possible values include: 'Public', 'Private'
        /// </param>
        /// <param name='backendServiceUrl'>
        /// </param>
        /// <param name='productIds'>
        /// </param>
        /// <param name='logo'>
        /// </param>
        /// <param name='documentation'>
        /// </param>
        /// <param name='status'>
        /// Possible values include: 'Preview', 'Active', 'Deprecated'
        /// </param>
        /// <param name='isCurrent'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateApiWithHttpMessagesAsync(System.Guid subscriptionId, string name, string path, string apiVersion, Stream openApiSpec, System.Guid? apiVersionSetId = default(System.Guid?), string providerId = default(string), string visibility = default(string), string backendServiceUrl = default(string), IList<System.Guid?> productIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), string status = default(string), bool? isCurrent = default(bool?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieves details of an API
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='apiId'>
        /// The API ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApiListModel>> GetApiWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='apiId'>
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='apiVersion'>
        /// </param>
        /// <param name='visibility'>
        /// Possible values include: 'Public', 'Private'
        /// </param>
        /// <param name='backendServiceUrl'>
        /// </param>
        /// <param name='productIds'>
        /// </param>
        /// <param name='logo'>
        /// </param>
        /// <param name='documentation'>
        /// </param>
        /// <param name='status'>
        /// Possible values include: 'Preview', 'Active', 'Deprecated'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> UpdateApiWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiId, string name = default(string), string apiVersion = default(string), string visibility = default(string), string backendServiceUrl = default(string), IList<System.Guid?> productIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), string status = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='apiId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteApiWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates IsCurrent Status of required API version
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='apiId'>
        /// Api Id
        /// </param>
        /// <param name='isCurrent'>
        /// IsCurrent status of API
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> MakeVersionIsCurrentWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiId, bool isCurrent, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve products for specified api
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='apiId'>
        /// Api ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ProductListModel>>> GetApiProductsWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the details of an API Key
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='apiKeyId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApiKeyListModel>> GetApiKeyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiKeyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Delete an API Key
        /// </summary>
        /// <param name='subscriptionId'>
        /// SubscriptionId
        /// </param>
        /// <param name='apiKeyId'>
        /// ApiKeyId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteApiKeyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiKeyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the API Keys of a subscription
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApiKeyListModel>> GetAllApiKeysWithHttpMessagesAsync(System.Guid subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create a new API Key
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApiKeyListModel>> SaveApiKeyWithHttpMessagesAsync(System.Guid subscriptionId, CreateApiKeyRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Regenerate the Primary Key
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='apiKeyId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdatedKeyResponseModel>> RegeneratePrimaryKeyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiKeyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Regenerate the Secondary Key
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='apiKeyId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<UpdatedKeyResponseModel>> RegenerateSecondaryKeyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiKeyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the state of the API key
        /// </summary>
        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='apiKeyId'>
        /// </param>
        /// <param name='request'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApiKeyListModel>> SaveSubscriptionStateWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiKeyId, ApiKeyStateRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='apiKeyId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ReportRecordListModel>> GetSubscriptionUsageReportWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiKeyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all APIs for Admin
        /// </summary>
        /// <param name='providerId'>
        /// Limit to APIs for this provider
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetApiSetsResponse>> GetAllApisForAdminWithHttpMessagesAsync(System.Guid? providerId = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Details of current version of APIs
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='provider'>
        /// Limit to APIs for this provider
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<GetApiSetsResponse>> GetAllApiSetsWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid? provider = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get Details of all version for a specific versionSet Id
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='apiVersionSetId'>
        /// VersionSet Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAllVersionsWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiVersionSetId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all usage of a product by a subscription within a date
        /// range
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// Limit results to this product
        /// </param>
        /// <param name='dateFrom'>
        /// Start date of range.
        /// </param>
        /// <param name='dateTo'>
        /// End date of range.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApimConsumptionAggregateModel>> GetUsageWithinDateRangeWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, System.DateTime dateFrom, System.DateTime dateTo, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all usage of a product by an api key id within a date
        /// range
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// Limit results to this product
        /// </param>
        /// <param name='apiKeyId'>
        /// Limit results to this api key
        /// </param>
        /// <param name='dateFrom'>
        /// Start date of range.
        /// </param>
        /// <param name='dateTo'>
        /// End date of range.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApimConsumptionAggregateModel>> GetUsageByApiKeyWithinDateRangeWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, System.Guid apiKeyId, System.DateTime dateFrom, System.DateTime dateTo, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the details of custom policy
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription id
        /// </param>
        /// <param name='policyId'>
        /// The Custom Policy ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CustomPolicyResponse>> GetCustomPolicyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid policyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the custom policy
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription id
        /// </param>
        /// <param name='policyId'>
        /// The Custom Policy ID
        /// </param>
        /// <param name='request'>
        /// The Custom Policy Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CustomPolicyResponse>> UpdateCustomPolicyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid policyId, CustomPolicyRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Apply a custom policy
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription id
        /// </param>
        /// <param name='request'>
        /// The Custom Policy Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CustomPolicyResponse>> CreateCustomPolicyWithHttpMessagesAsync(System.Guid subscriptionId, CustomPolicyRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='subscriptionId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ProviderDetails>>> GetGatewayProvidersWithHttpMessagesAsync(string subscriptionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get all the policies for a product / api
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription id
        /// </param>
        /// <param name='entityId'>
        /// The id of the entity whose policies are being fetched
        /// </param>
        /// <param name='entityType'>
        /// Entity type for either product / api. Possible values include:
        /// 'Product', 'Api'
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<PolicyModel>>> GetAllPoliciesWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid entityId, string entityType, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a specific policy
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription id
        /// </param>
        /// <param name='policyId'>
        /// The policy Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<PolicyModel>> GetPolicyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid policyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes an apim policy
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription id
        /// </param>
        /// <param name='policyId'>
        /// Apim policy document id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<bool?>> DeletePolicyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid policyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve gateway product
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// Product ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProductListModel>> GetProductWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a product and maps the apis to that product
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// The product to update
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='providerId'>
        /// </param>
        /// <param name='apiKeyRequired'>
        /// </param>
        /// <param name='clientCredentialRequired'>
        /// </param>
        /// <param name='openidConfigIssuer'>
        /// Possible values include: 'IdentityKmdlogicIo',
        /// 'LogicidentityprodB2clogicCom', 'Custom'
        /// </param>
        /// <param name='openidConfigCustomUrl'>
        /// </param>
        /// <param name='providerApprovalRequired'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='productTerms'>
        /// </param>
        /// <param name='visibility'>
        /// Possible values include: 'Public', 'Private'
        /// </param>
        /// <param name='apiIds'>
        /// </param>
        /// <param name='logo'>
        /// </param>
        /// <param name='documentation'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProductListModel>> UpdateProductWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, string name = default(string), string description = default(string), string providerId = default(string), bool? apiKeyRequired = default(bool?), bool? clientCredentialRequired = default(bool?), string openidConfigIssuer = default(string), string openidConfigCustomUrl = default(string), bool? providerApprovalRequired = default(bool?), string applicationId = default(string), string productTerms = default(string), string visibility = default(string), IList<System.Guid?> apiIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Deletes the product
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// The product to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeleteProductWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all gateway products
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='provider'>
        /// Limit to products for this provider
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetProductListModel>>> GetAllProductsWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid? provider = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a product and maps the apis to that product
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='name'>
        /// </param>
        /// <param name='description'>
        /// </param>
        /// <param name='providerId'>
        /// </param>
        /// <param name='apiKeyRequired'>
        /// </param>
        /// <param name='providerApprovalRequired'>
        /// </param>
        /// <param name='productTerms'>
        /// </param>
        /// <param name='visibility'>
        /// Possible values include: 'Public', 'Private'
        /// </param>
        /// <param name='apiIds'>
        /// </param>
        /// <param name='logo'>
        /// </param>
        /// <param name='documentation'>
        /// </param>
        /// <param name='clientCredentialRequired'>
        /// </param>
        /// <param name='openidConfigIssuer'>
        /// Possible values include: 'IdentityKmdlogicIo',
        /// 'LogicidentityprodB2clogicCom', 'Custom'
        /// </param>
        /// <param name='openidConfigCustomUrl'>
        /// </param>
        /// <param name='applicationId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ProductListModel>> CreateProductWithHttpMessagesAsync(System.Guid subscriptionId, string name, string description = default(string), string providerId = default(string), bool? apiKeyRequired = default(bool?), bool? providerApprovalRequired = default(bool?), string productTerms = default(string), string visibility = default(string), IList<System.Guid?> apiIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), bool? clientCredentialRequired = default(bool?), string openidConfigIssuer = default(string), string openidConfigCustomUrl = default(string), string applicationId = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all gateway products for the admin
        /// </summary>
        /// <param name='provider'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<GetProductListModel>>> GetAllProductsForAdminWithHttpMessagesAsync(System.Guid? provider = default(System.Guid?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve subscriptions for specified product
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// Product ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ApiKeyListModel>>> GetApiKeysWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve apis for specified product
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// Product ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ApiListModel>>> GetProductApisWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all usage of a product within a date range
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// Limit results to this product
        /// </param>
        /// <param name='dateFrom'>
        /// Start date of range.
        /// </param>
        /// <param name='dateTo'>
        /// End date of range.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApimConsumptionAggregateModel>> GetUsageWithinDateRange1WithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, System.DateTime dateFrom, System.DateTime dateTo, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Retrieve all usage of a product by an api key id within a date
        /// range
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// Limit results to this product
        /// </param>
        /// <param name='apiKeyId'>
        /// Limit results to this api key
        /// </param>
        /// <param name='dateFrom'>
        /// Start date of range.
        /// </param>
        /// <param name='dateTo'>
        /// End date of range.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<ApimConsumptionAggregateModel>> GetUsageByApiKeyWithinDateRange1WithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, System.Guid apiKeyId, System.DateTime dateFrom, System.DateTime dateTo, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Download a csv file summarizing product usage by api key
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='productId'>
        /// Limit results to this product.
        /// </param>
        /// <param name='dateFrom'>
        /// Start date of range.
        /// </param>
        /// <param name='dateTo'>
        /// End date of range.
        /// </param>
        /// <param name='downloadReportFormat'>
        /// File format.  Either Csv or Xlsx. Possible values include: 'Csv',
        /// 'Xlsx'
        /// </param>
        /// <param name='includeServerErrors'>
        /// Usually 5xx errors are not included.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DownloadSubscriptionUsageReportWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid productId, System.DateTime dateFrom, System.DateTime dateTo, string downloadReportFormat, bool? includeServerErrors = false, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// An endpoint for uploading ZIP file with "publishing" content
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscriptionId
        /// </param>
        /// <param name='file'>
        /// ZIP file
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<CreateProductResponse>> PublishWithHttpMessagesAsync(System.Guid subscriptionId, Stream file, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get status for published content
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscriptionId
        /// </param>
        /// <param name='requestId'>
        /// Id of the publishing request
        /// </param>
        /// <param name='sequenceFrom'>
        /// Sequence number to get data from (0 for all)
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<ProcessingStatusLog>>> GetPublishStatusWithHttpMessagesAsync(System.Guid subscriptionId, string requestId, int? sequenceFrom = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the details of a rate limit policy
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription id
        /// </param>
        /// <param name='policyId'>
        /// The Rate Limit Policy ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RateLimitPolicyResponse>> GetRateLimitPolicyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid policyId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Update the rate limit policy
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription id
        /// </param>
        /// <param name='policyId'>
        /// The Rate Limit Policy ID
        /// </param>
        /// <param name='request'>
        /// The Rate Limit Policy Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RateLimitPolicyResponse>> UpdateRateLimitPolicyWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid policyId, RateLimitPolicyRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Apply a rate limit policy
        /// </summary>
        /// <param name='subscriptionId'>
        /// Logic subscription id
        /// </param>
        /// <param name='request'>
        /// The Rate Limit Policy Request
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<RateLimitPolicyResponse>> CreateRateLimitPolicyWithHttpMessagesAsync(System.Guid subscriptionId, RateLimitPolicyRequest request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a List of all Revisions for a specific API
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='apiId'>
        /// Api Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetAllRevisionsWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a Revision for a specific API
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='apiId'>
        /// Api Id
        /// </param>
        /// <param name='openApiSpec'>
        /// </param>
        /// <param name='revisionDescription'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> CreateRevisionWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiId, Stream openApiSpec, string revisionDescription = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get a particular Revision for a specific API
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='apiId'>
        /// Api Id
        /// </param>
        /// <param name='apiRevisionId'>
        /// RevisionId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetRevisionWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiId, System.Guid apiRevisionId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Updates a revision details of a particular revision
        /// </summary>
        /// <param name='subscriptionId'>
        /// Subscription ID
        /// </param>
        /// <param name='apiId'>
        /// Api Id
        /// </param>
        /// <param name='apiRevisionId'>
        /// Apirevision Id
        /// </param>
        /// <param name='request'>
        /// The revision details to update
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<string>> UpdateRevisionWithHttpMessagesAsync(System.Guid subscriptionId, System.Guid apiId, System.Guid apiRevisionId, RevisionUpdateRequestModel request, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
