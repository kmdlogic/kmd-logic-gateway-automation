// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Gateway.Automation.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GatewayClient.
    /// </summary>
    internal static partial class GatewayClientExtensions
    {
            /// <summary>
            /// Retrieve all gateway apis
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='provider'>
            /// Limit to APIs for this provider
            /// </param>
            public static IList<ApiListModel> GetAllApis(this IGatewayClient operations, System.Guid subscriptionId, System.Guid? provider = default(System.Guid?))
            {
                return operations.GetAllApisAsync(subscriptionId, provider).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all gateway apis
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='provider'>
            /// Limit to APIs for this provider
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiListModel>> GetAllApisAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid? provider = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllApisWithHttpMessagesAsync(subscriptionId, provider, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds an api if versionsetid is null and adds a version if versionsetid is
            /// not null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='openApiSpec'>
            /// </param>
            /// <param name='apiVersionSetId'>
            /// Versionset ID
            /// </param>
            /// <param name='providerId'>
            /// </param>
            /// <param name='visibility'>
            /// Possible values include: 'Public', 'Private'
            /// </param>
            /// <param name='backendServiceUrl'>
            /// </param>
            /// <param name='productIds'>
            /// </param>
            /// <param name='logo'>
            /// </param>
            /// <param name='documentation'>
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'Preview', 'Active', 'Deprecated'
            /// </param>
            /// <param name='isCurrent'>
            /// </param>
            public static object CreateApi(this IGatewayClient operations, System.Guid subscriptionId, string name, string path, string apiVersion, Stream openApiSpec, System.Guid? apiVersionSetId = default(System.Guid?), string providerId = default(string), string visibility = default(string), string backendServiceUrl = default(string), IList<System.Guid?> productIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), string status = default(string), bool? isCurrent = default(bool?))
            {
                return operations.CreateApiAsync(subscriptionId, name, path, apiVersion, openApiSpec, apiVersionSetId, providerId, visibility, backendServiceUrl, productIds, logo, documentation, status, isCurrent).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds an api if versionsetid is null and adds a version if versionsetid is
            /// not null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='path'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='openApiSpec'>
            /// </param>
            /// <param name='apiVersionSetId'>
            /// Versionset ID
            /// </param>
            /// <param name='providerId'>
            /// </param>
            /// <param name='visibility'>
            /// Possible values include: 'Public', 'Private'
            /// </param>
            /// <param name='backendServiceUrl'>
            /// </param>
            /// <param name='productIds'>
            /// </param>
            /// <param name='logo'>
            /// </param>
            /// <param name='documentation'>
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'Preview', 'Active', 'Deprecated'
            /// </param>
            /// <param name='isCurrent'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateApiAsync(this IGatewayClient operations, System.Guid subscriptionId, string name, string path, string apiVersion, Stream openApiSpec, System.Guid? apiVersionSetId = default(System.Guid?), string providerId = default(string), string visibility = default(string), string backendServiceUrl = default(string), IList<System.Guid?> productIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), string status = default(string), bool? isCurrent = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateApiWithHttpMessagesAsync(subscriptionId, name, path, apiVersion, openApiSpec, apiVersionSetId, providerId, visibility, backendServiceUrl, productIds, logo, documentation, status, isCurrent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves details of an API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// The API ID
            /// </param>
            public static ApiListModel GetApi(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId)
            {
                return operations.GetApiAsync(subscriptionId, apiId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves details of an API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// The API ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiListModel> GetApiAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiWithHttpMessagesAsync(subscriptionId, apiId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='visibility'>
            /// Possible values include: 'Public', 'Private'
            /// </param>
            /// <param name='backendServiceUrl'>
            /// </param>
            /// <param name='productIds'>
            /// </param>
            /// <param name='logo'>
            /// </param>
            /// <param name='documentation'>
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'Preview', 'Active', 'Deprecated'
            /// </param>
            public static object UpdateApi(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, string name = default(string), string apiVersion = default(string), string visibility = default(string), string backendServiceUrl = default(string), IList<System.Guid?> productIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), string status = default(string))
            {
                return operations.UpdateApiAsync(subscriptionId, apiId, name, apiVersion, visibility, backendServiceUrl, productIds, logo, documentation, status).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiId'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='apiVersion'>
            /// </param>
            /// <param name='visibility'>
            /// Possible values include: 'Public', 'Private'
            /// </param>
            /// <param name='backendServiceUrl'>
            /// </param>
            /// <param name='productIds'>
            /// </param>
            /// <param name='logo'>
            /// </param>
            /// <param name='documentation'>
            /// </param>
            /// <param name='status'>
            /// Possible values include: 'Preview', 'Active', 'Deprecated'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateApiAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, string name = default(string), string apiVersion = default(string), string visibility = default(string), string backendServiceUrl = default(string), IList<System.Guid?> productIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), string status = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApiWithHttpMessagesAsync(subscriptionId, apiId, name, apiVersion, visibility, backendServiceUrl, productIds, logo, documentation, status, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiId'>
            /// </param>
            public static void DeleteApi(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId)
            {
                operations.DeleteApiAsync(subscriptionId, apiId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteApiAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteApiWithHttpMessagesAsync(subscriptionId, apiId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Updates IsCurrent Status of required API version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            /// <param name='isCurrent'>
            /// IsCurrent status of API
            /// </param>
            public static object MakeVersionIsCurrent(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, bool isCurrent)
            {
                return operations.MakeVersionIsCurrentAsync(subscriptionId, apiId, isCurrent).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates IsCurrent Status of required API version
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            /// <param name='isCurrent'>
            /// IsCurrent status of API
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MakeVersionIsCurrentAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, bool isCurrent, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MakeVersionIsCurrentWithHttpMessagesAsync(subscriptionId, apiId, isCurrent, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve products for specified api
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api ID
            /// </param>
            public static IList<ProductListModel> GetApiProducts(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId)
            {
                return operations.GetApiProductsAsync(subscriptionId, apiId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve products for specified api
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProductListModel>> GetApiProductsAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiProductsWithHttpMessagesAsync(subscriptionId, apiId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the details of an API Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            public static ApiKeyListModel GetApiKey(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId)
            {
                return operations.GetApiKeyAsync(subscriptionId, apiKeyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the details of an API Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiKeyListModel> GetApiKeyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiKeyWithHttpMessagesAsync(subscriptionId, apiKeyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an API Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// SubscriptionId
            /// </param>
            /// <param name='apiKeyId'>
            /// ApiKeyId
            /// </param>
            public static void DeleteApiKey(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId)
            {
                operations.DeleteApiKeyAsync(subscriptionId, apiKeyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an API Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// SubscriptionId
            /// </param>
            /// <param name='apiKeyId'>
            /// ApiKeyId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteApiKeyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteApiKeyWithHttpMessagesAsync(subscriptionId, apiKeyId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get the API Keys of a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static ApiKeyListModel GetAllApiKeys(this IGatewayClient operations, System.Guid subscriptionId)
            {
                return operations.GetAllApiKeysAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the API Keys of a subscription
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiKeyListModel> GetAllApiKeysAsync(this IGatewayClient operations, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllApiKeysWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a new API Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ApiKeyListModel SaveApiKey(this IGatewayClient operations, System.Guid subscriptionId, CreateApiKeyRequest request)
            {
                return operations.SaveApiKeyAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new API Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiKeyListModel> SaveApiKeyAsync(this IGatewayClient operations, System.Guid subscriptionId, CreateApiKeyRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveApiKeyWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate the Primary Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            public static UpdatedKeyResponseModel RegeneratePrimaryKey(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId)
            {
                return operations.RegeneratePrimaryKeyAsync(subscriptionId, apiKeyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate the Primary Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdatedKeyResponseModel> RegeneratePrimaryKeyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegeneratePrimaryKeyWithHttpMessagesAsync(subscriptionId, apiKeyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerate the Secondary Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            public static UpdatedKeyResponseModel RegenerateSecondaryKey(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId)
            {
                return operations.RegenerateSecondaryKeyAsync(subscriptionId, apiKeyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerate the Secondary Key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UpdatedKeyResponseModel> RegenerateSecondaryKeyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateSecondaryKeyWithHttpMessagesAsync(subscriptionId, apiKeyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the state of the API key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static ApiKeyListModel SaveSubscriptionState(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId, ApiKeyStateRequest request)
            {
                return operations.SaveSubscriptionStateAsync(subscriptionId, apiKeyId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the state of the API key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApiKeyListModel> SaveSubscriptionStateAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId, ApiKeyStateRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SaveSubscriptionStateWithHttpMessagesAsync(subscriptionId, apiKeyId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            public static ReportRecordListModel GetSubscriptionUsageReport(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId)
            {
                return operations.GetSubscriptionUsageReportAsync(subscriptionId, apiKeyId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='apiKeyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReportRecordListModel> GetSubscriptionUsageReportAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiKeyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionUsageReportWithHttpMessagesAsync(subscriptionId, apiKeyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all APIs for Admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Limit to APIs for this provider
            /// </param>
            public static GetApiSetsResponse GetAllApisForAdmin(this IGatewayClient operations, System.Guid? providerId = default(System.Guid?))
            {
                return operations.GetAllApisForAdminAsync(providerId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all APIs for Admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerId'>
            /// Limit to APIs for this provider
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetApiSetsResponse> GetAllApisForAdminAsync(this IGatewayClient operations, System.Guid? providerId = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllApisForAdminWithHttpMessagesAsync(providerId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Details of current version of APIs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='provider'>
            /// Limit to APIs for this provider
            /// </param>
            public static GetApiSetsResponse GetAllApiSets(this IGatewayClient operations, System.Guid subscriptionId, System.Guid? provider = default(System.Guid?))
            {
                return operations.GetAllApiSetsAsync(subscriptionId, provider).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Details of current version of APIs
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='provider'>
            /// Limit to APIs for this provider
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetApiSetsResponse> GetAllApiSetsAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid? provider = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllApiSetsWithHttpMessagesAsync(subscriptionId, provider, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Details of all version for a specific versionSet Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiVersionSetId'>
            /// VersionSet Id
            /// </param>
            public static object GetAllVersions(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiVersionSetId)
            {
                return operations.GetAllVersionsAsync(subscriptionId, apiVersionSetId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Details of all version for a specific versionSet Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiVersionSetId'>
            /// VersionSet Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllVersionsAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiVersionSetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllVersionsWithHttpMessagesAsync(subscriptionId, apiVersionSetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all usage of a product by a subscription within a date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            public static ApimConsumptionAggregateModel GetUsageWithinDateRange(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.DateTime dateFrom, System.DateTime dateTo)
            {
                return operations.GetUsageWithinDateRangeAsync(subscriptionId, productId, dateFrom, dateTo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all usage of a product by a subscription within a date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApimConsumptionAggregateModel> GetUsageWithinDateRangeAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.DateTime dateFrom, System.DateTime dateTo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsageWithinDateRangeWithHttpMessagesAsync(subscriptionId, productId, dateFrom, dateTo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all usage of a product by an api key id within a date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product
            /// </param>
            /// <param name='apiKeyId'>
            /// Limit results to this api key
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            public static ApimConsumptionAggregateModel GetUsageByApiKeyWithinDateRange(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.Guid apiKeyId, System.DateTime dateFrom, System.DateTime dateTo)
            {
                return operations.GetUsageByApiKeyWithinDateRangeAsync(subscriptionId, productId, apiKeyId, dateFrom, dateTo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all usage of a product by an api key id within a date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product
            /// </param>
            /// <param name='apiKeyId'>
            /// Limit results to this api key
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApimConsumptionAggregateModel> GetUsageByApiKeyWithinDateRangeAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.Guid apiKeyId, System.DateTime dateFrom, System.DateTime dateTo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsageByApiKeyWithinDateRangeWithHttpMessagesAsync(subscriptionId, productId, apiKeyId, dateFrom, dateTo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the details of custom policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The Custom Policy ID
            /// </param>
            public static CustomPolicyResponse GetCustomPolicy(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId)
            {
                return operations.GetCustomPolicyAsync(subscriptionId, policyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the details of custom policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The Custom Policy ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomPolicyResponse> GetCustomPolicyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomPolicyWithHttpMessagesAsync(subscriptionId, policyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the custom policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The Custom Policy ID
            /// </param>
            /// <param name='request'>
            /// The Custom Policy Request
            /// </param>
            public static CustomPolicyResponse UpdateCustomPolicy(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId, CustomPolicyRequest request)
            {
                return operations.UpdateCustomPolicyAsync(subscriptionId, policyId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the custom policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The Custom Policy ID
            /// </param>
            /// <param name='request'>
            /// The Custom Policy Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomPolicyResponse> UpdateCustomPolicyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId, CustomPolicyRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCustomPolicyWithHttpMessagesAsync(subscriptionId, policyId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Apply a custom policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='request'>
            /// The Custom Policy Request
            /// </param>
            public static CustomPolicyResponse CreateCustomPolicy(this IGatewayClient operations, System.Guid subscriptionId, CustomPolicyRequest request)
            {
                return operations.CreateCustomPolicyAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Apply a custom policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='request'>
            /// The Custom Policy Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomPolicyResponse> CreateCustomPolicyAsync(this IGatewayClient operations, System.Guid subscriptionId, CustomPolicyRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateCustomPolicyWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            public static IList<ProviderDetails> GetGatewayProviders(this IGatewayClient operations, string subscriptionId)
            {
                return operations.GetGatewayProvidersAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProviderDetails>> GetGatewayProvidersAsync(this IGatewayClient operations, string subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGatewayProvidersWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all the policies for a product / api
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='entityId'>
            /// The id of the entity whose policies are being fetched
            /// </param>
            /// <param name='entityType'>
            /// Entity type for either product / api. Possible values include: 'Product',
            /// 'Api'
            /// </param>
            public static IList<PolicyModel> GetAllPolicies(this IGatewayClient operations, System.Guid subscriptionId, System.Guid entityId, string entityType)
            {
                return operations.GetAllPoliciesAsync(subscriptionId, entityId, entityType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all the policies for a product / api
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='entityId'>
            /// The id of the entity whose policies are being fetched
            /// </param>
            /// <param name='entityType'>
            /// Entity type for either product / api. Possible values include: 'Product',
            /// 'Api'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<PolicyModel>> GetAllPoliciesAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid entityId, string entityType, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllPoliciesWithHttpMessagesAsync(subscriptionId, entityId, entityType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a specific policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The policy Id
            /// </param>
            public static PolicyModel GetPolicy(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId)
            {
                return operations.GetPolicyAsync(subscriptionId, policyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a specific policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The policy Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PolicyModel> GetPolicyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPolicyWithHttpMessagesAsync(subscriptionId, policyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an apim policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// Apim policy document id
            /// </param>
            public static bool? DeletePolicy(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId)
            {
                return operations.DeletePolicyAsync(subscriptionId, policyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an apim policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// Apim policy document id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> DeletePolicyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePolicyWithHttpMessagesAsync(subscriptionId, policyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve gateway product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Product ID
            /// </param>
            public static ProductListModel GetProduct(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId)
            {
                return operations.GetProductAsync(subscriptionId, productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve gateway product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Product ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductListModel> GetProductAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductWithHttpMessagesAsync(subscriptionId, productId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a product and maps the apis to that product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// The product to update
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='providerId'>
            /// </param>
            /// <param name='apiKeyRequired'>
            /// </param>
            /// <param name='clientCredentialRequired'>
            /// </param>
            /// <param name='openidConfigIssuer'>
            /// Possible values include: 'IdentityKmdlogicIo',
            /// 'LogicidentityprodB2clogicCom', 'Custom'
            /// </param>
            /// <param name='openidConfigCustomUrl'>
            /// </param>
            /// <param name='providerApprovalRequired'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='productTerms'>
            /// </param>
            /// <param name='visibility'>
            /// Possible values include: 'Public', 'Private'
            /// </param>
            /// <param name='apiIds'>
            /// </param>
            /// <param name='logo'>
            /// </param>
            /// <param name='documentation'>
            /// </param>
            public static ProductListModel UpdateProduct(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, string name = default(string), string description = default(string), string providerId = default(string), bool? apiKeyRequired = default(bool?), bool? clientCredentialRequired = default(bool?), string openidConfigIssuer = default(string), string openidConfigCustomUrl = default(string), bool? providerApprovalRequired = default(bool?), string applicationId = default(string), string productTerms = default(string), string visibility = default(string), IList<System.Guid?> apiIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream))
            {
                return operations.UpdateProductAsync(subscriptionId, productId, name, description, providerId, apiKeyRequired, clientCredentialRequired, openidConfigIssuer, openidConfigCustomUrl, providerApprovalRequired, applicationId, productTerms, visibility, apiIds, logo, documentation).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a product and maps the apis to that product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// The product to update
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='providerId'>
            /// </param>
            /// <param name='apiKeyRequired'>
            /// </param>
            /// <param name='clientCredentialRequired'>
            /// </param>
            /// <param name='openidConfigIssuer'>
            /// Possible values include: 'IdentityKmdlogicIo',
            /// 'LogicidentityprodB2clogicCom', 'Custom'
            /// </param>
            /// <param name='openidConfigCustomUrl'>
            /// </param>
            /// <param name='providerApprovalRequired'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='productTerms'>
            /// </param>
            /// <param name='visibility'>
            /// Possible values include: 'Public', 'Private'
            /// </param>
            /// <param name='apiIds'>
            /// </param>
            /// <param name='logo'>
            /// </param>
            /// <param name='documentation'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductListModel> UpdateProductAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, string name = default(string), string description = default(string), string providerId = default(string), bool? apiKeyRequired = default(bool?), bool? clientCredentialRequired = default(bool?), string openidConfigIssuer = default(string), string openidConfigCustomUrl = default(string), bool? providerApprovalRequired = default(bool?), string applicationId = default(string), string productTerms = default(string), string visibility = default(string), IList<System.Guid?> apiIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateProductWithHttpMessagesAsync(subscriptionId, productId, name, description, providerId, apiKeyRequired, clientCredentialRequired, openidConfigIssuer, openidConfigCustomUrl, providerApprovalRequired, applicationId, productTerms, visibility, apiIds, logo, documentation, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// The product to delete
            /// </param>
            public static void DeleteProduct(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId)
            {
                operations.DeleteProductAsync(subscriptionId, productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// The product to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProductAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProductWithHttpMessagesAsync(subscriptionId, productId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve all gateway products
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='provider'>
            /// Limit to products for this provider
            /// </param>
            public static IList<GetProductListModel> GetAllProducts(this IGatewayClient operations, System.Guid subscriptionId, System.Guid? provider = default(System.Guid?))
            {
                return operations.GetAllProductsAsync(subscriptionId, provider).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all gateway products
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='provider'>
            /// Limit to products for this provider
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetProductListModel>> GetAllProductsAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid? provider = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllProductsWithHttpMessagesAsync(subscriptionId, provider, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a product and maps the apis to that product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='providerId'>
            /// </param>
            /// <param name='apiKeyRequired'>
            /// </param>
            /// <param name='providerApprovalRequired'>
            /// </param>
            /// <param name='productTerms'>
            /// </param>
            /// <param name='visibility'>
            /// Possible values include: 'Public', 'Private'
            /// </param>
            /// <param name='apiIds'>
            /// </param>
            /// <param name='logo'>
            /// </param>
            /// <param name='documentation'>
            /// </param>
            /// <param name='clientCredentialRequired'>
            /// </param>
            /// <param name='openidConfigIssuer'>
            /// Possible values include: 'IdentityKmdlogicIo',
            /// 'LogicidentityprodB2clogicCom', 'Custom'
            /// </param>
            /// <param name='openidConfigCustomUrl'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            public static ProductListModel CreateProduct(this IGatewayClient operations, System.Guid subscriptionId, string name, string description = default(string), string providerId = default(string), bool? apiKeyRequired = default(bool?), bool? providerApprovalRequired = default(bool?), string productTerms = default(string), string visibility = default(string), IList<System.Guid?> apiIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), bool? clientCredentialRequired = default(bool?), string openidConfigIssuer = default(string), string openidConfigCustomUrl = default(string), string applicationId = default(string))
            {
                return operations.CreateProductAsync(subscriptionId, name, description, providerId, apiKeyRequired, providerApprovalRequired, productTerms, visibility, apiIds, logo, documentation, clientCredentialRequired, openidConfigIssuer, openidConfigCustomUrl, applicationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a product and maps the apis to that product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='description'>
            /// </param>
            /// <param name='providerId'>
            /// </param>
            /// <param name='apiKeyRequired'>
            /// </param>
            /// <param name='providerApprovalRequired'>
            /// </param>
            /// <param name='productTerms'>
            /// </param>
            /// <param name='visibility'>
            /// Possible values include: 'Public', 'Private'
            /// </param>
            /// <param name='apiIds'>
            /// </param>
            /// <param name='logo'>
            /// </param>
            /// <param name='documentation'>
            /// </param>
            /// <param name='clientCredentialRequired'>
            /// </param>
            /// <param name='openidConfigIssuer'>
            /// Possible values include: 'IdentityKmdlogicIo',
            /// 'LogicidentityprodB2clogicCom', 'Custom'
            /// </param>
            /// <param name='openidConfigCustomUrl'>
            /// </param>
            /// <param name='applicationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProductListModel> CreateProductAsync(this IGatewayClient operations, System.Guid subscriptionId, string name, string description = default(string), string providerId = default(string), bool? apiKeyRequired = default(bool?), bool? providerApprovalRequired = default(bool?), string productTerms = default(string), string visibility = default(string), IList<System.Guid?> apiIds = default(IList<System.Guid?>), Stream logo = default(Stream), Stream documentation = default(Stream), bool? clientCredentialRequired = default(bool?), string openidConfigIssuer = default(string), string openidConfigCustomUrl = default(string), string applicationId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateProductWithHttpMessagesAsync(subscriptionId, name, description, providerId, apiKeyRequired, providerApprovalRequired, productTerms, visibility, apiIds, logo, documentation, clientCredentialRequired, openidConfigIssuer, openidConfigCustomUrl, applicationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all gateway products for the admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            public static IList<GetProductListModel> GetAllProductsForAdmin(this IGatewayClient operations, System.Guid? provider = default(System.Guid?))
            {
                return operations.GetAllProductsForAdminAsync(provider).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all gateway products for the admin
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetProductListModel>> GetAllProductsForAdminAsync(this IGatewayClient operations, System.Guid? provider = default(System.Guid?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllProductsForAdminWithHttpMessagesAsync(provider, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve subscriptions for specified product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Product ID
            /// </param>
            public static IList<ApiKeyListModel> GetApiKeys(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId)
            {
                return operations.GetApiKeysAsync(subscriptionId, productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve subscriptions for specified product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Product ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiKeyListModel>> GetApiKeysAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetApiKeysWithHttpMessagesAsync(subscriptionId, productId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve apis for specified product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Product ID
            /// </param>
            public static IList<ApiListModel> GetProductApis(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId)
            {
                return operations.GetProductApisAsync(subscriptionId, productId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve apis for specified product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Product ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ApiListModel>> GetProductApisAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProductApisWithHttpMessagesAsync(subscriptionId, productId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all usage of a product within a date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            public static ApimConsumptionAggregateModel GetUsageWithinDateRange1(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.DateTime dateFrom, System.DateTime dateTo)
            {
                return operations.GetUsageWithinDateRange1Async(subscriptionId, productId, dateFrom, dateTo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all usage of a product within a date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApimConsumptionAggregateModel> GetUsageWithinDateRange1Async(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.DateTime dateFrom, System.DateTime dateTo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsageWithinDateRange1WithHttpMessagesAsync(subscriptionId, productId, dateFrom, dateTo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all usage of a product by an api key id within a date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product
            /// </param>
            /// <param name='apiKeyId'>
            /// Limit results to this api key
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            public static ApimConsumptionAggregateModel GetUsageByApiKeyWithinDateRange1(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.Guid apiKeyId, System.DateTime dateFrom, System.DateTime dateTo)
            {
                return operations.GetUsageByApiKeyWithinDateRange1Async(subscriptionId, productId, apiKeyId, dateFrom, dateTo).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all usage of a product by an api key id within a date range
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product
            /// </param>
            /// <param name='apiKeyId'>
            /// Limit results to this api key
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ApimConsumptionAggregateModel> GetUsageByApiKeyWithinDateRange1Async(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.Guid apiKeyId, System.DateTime dateFrom, System.DateTime dateTo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetUsageByApiKeyWithinDateRange1WithHttpMessagesAsync(subscriptionId, productId, apiKeyId, dateFrom, dateTo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Download a csv file summarizing product usage by api key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product.
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            /// <param name='downloadReportFormat'>
            /// File format.  Either Csv or Xlsx. Possible values include: 'Csv', 'Xlsx'
            /// </param>
            /// <param name='includeServerErrors'>
            /// Usually 5xx errors are not included.
            /// </param>
            public static void DownloadSubscriptionUsageReport(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.DateTime dateFrom, System.DateTime dateTo, string downloadReportFormat, bool? includeServerErrors = false)
            {
                operations.DownloadSubscriptionUsageReportAsync(subscriptionId, productId, dateFrom, dateTo, downloadReportFormat, includeServerErrors).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Download a csv file summarizing product usage by api key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='productId'>
            /// Limit results to this product.
            /// </param>
            /// <param name='dateFrom'>
            /// Start date of range.
            /// </param>
            /// <param name='dateTo'>
            /// End date of range.
            /// </param>
            /// <param name='downloadReportFormat'>
            /// File format.  Either Csv or Xlsx. Possible values include: 'Csv', 'Xlsx'
            /// </param>
            /// <param name='includeServerErrors'>
            /// Usually 5xx errors are not included.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DownloadSubscriptionUsageReportAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid productId, System.DateTime dateFrom, System.DateTime dateTo, string downloadReportFormat, bool? includeServerErrors = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DownloadSubscriptionUsageReportWithHttpMessagesAsync(subscriptionId, productId, dateFrom, dateTo, downloadReportFormat, includeServerErrors, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// An endpoint for uploading ZIP file with "publishing" content
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscriptionId
            /// </param>
            /// <param name='file'>
            /// ZIP file
            /// </param>
            public static CreateProductResponse Publish(this IGatewayClient operations, System.Guid subscriptionId, Stream file)
            {
                return operations.PublishAsync(subscriptionId, file).GetAwaiter().GetResult();
            }

            /// <summary>
            /// An endpoint for uploading ZIP file with "publishing" content
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscriptionId
            /// </param>
            /// <param name='file'>
            /// ZIP file
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateProductResponse> PublishAsync(this IGatewayClient operations, System.Guid subscriptionId, Stream file, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PublishWithHttpMessagesAsync(subscriptionId, file, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get status for published content
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscriptionId
            /// </param>
            /// <param name='requestId'>
            /// Id of the publishing request
            /// </param>
            /// <param name='sequenceFrom'>
            /// Sequence number to get data from (0 for all)
            /// </param>
            public static IList<ProcessingStatusLog> GetPublishStatus(this IGatewayClient operations, System.Guid subscriptionId, string requestId, int? sequenceFrom = default(int?))
            {
                return operations.GetPublishStatusAsync(subscriptionId, requestId, sequenceFrom).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get status for published content
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscriptionId
            /// </param>
            /// <param name='requestId'>
            /// Id of the publishing request
            /// </param>
            /// <param name='sequenceFrom'>
            /// Sequence number to get data from (0 for all)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProcessingStatusLog>> GetPublishStatusAsync(this IGatewayClient operations, System.Guid subscriptionId, string requestId, int? sequenceFrom = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPublishStatusWithHttpMessagesAsync(subscriptionId, requestId, sequenceFrom, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the details of a rate limit policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The Rate Limit Policy ID
            /// </param>
            public static RateLimitPolicyResponse GetRateLimitPolicy(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId)
            {
                return operations.GetRateLimitPolicyAsync(subscriptionId, policyId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the details of a rate limit policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The Rate Limit Policy ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RateLimitPolicyResponse> GetRateLimitPolicyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRateLimitPolicyWithHttpMessagesAsync(subscriptionId, policyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the rate limit policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The Rate Limit Policy ID
            /// </param>
            /// <param name='request'>
            /// The Rate Limit Policy Request
            /// </param>
            public static RateLimitPolicyResponse UpdateRateLimitPolicy(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId, RateLimitPolicyRequest request)
            {
                return operations.UpdateRateLimitPolicyAsync(subscriptionId, policyId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the rate limit policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='policyId'>
            /// The Rate Limit Policy ID
            /// </param>
            /// <param name='request'>
            /// The Rate Limit Policy Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RateLimitPolicyResponse> UpdateRateLimitPolicyAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid policyId, RateLimitPolicyRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRateLimitPolicyWithHttpMessagesAsync(subscriptionId, policyId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Apply a rate limit policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='request'>
            /// The Rate Limit Policy Request
            /// </param>
            public static RateLimitPolicyResponse CreateRateLimitPolicy(this IGatewayClient operations, System.Guid subscriptionId, RateLimitPolicyRequest request)
            {
                return operations.CreateRateLimitPolicyAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Apply a rate limit policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Logic subscription id
            /// </param>
            /// <param name='request'>
            /// The Rate Limit Policy Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RateLimitPolicyResponse> CreateRateLimitPolicyAsync(this IGatewayClient operations, System.Guid subscriptionId, RateLimitPolicyRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRateLimitPolicyWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a List of all Revisions for a specific API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            public static object GetAllRevisions(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId)
            {
                return operations.GetAllRevisionsAsync(subscriptionId, apiId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a List of all Revisions for a specific API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllRevisionsAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllRevisionsWithHttpMessagesAsync(subscriptionId, apiId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a Revision for a specific API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            /// <param name='openApiSpec'>
            /// </param>
            /// <param name='revisionDescription'>
            /// </param>
            public static object CreateRevision(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, Stream openApiSpec, string revisionDescription = default(string))
            {
                return operations.CreateRevisionAsync(subscriptionId, apiId, openApiSpec, revisionDescription).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Revision for a specific API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            /// <param name='openApiSpec'>
            /// </param>
            /// <param name='revisionDescription'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateRevisionAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, Stream openApiSpec, string revisionDescription = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRevisionWithHttpMessagesAsync(subscriptionId, apiId, openApiSpec, revisionDescription, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a particular Revision for a specific API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            /// <param name='apiRevisionId'>
            /// RevisionId
            /// </param>
            public static object GetRevision(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, System.Guid apiRevisionId)
            {
                return operations.GetRevisionAsync(subscriptionId, apiId, apiRevisionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a particular Revision for a specific API
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            /// <param name='apiRevisionId'>
            /// RevisionId
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetRevisionAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, System.Guid apiRevisionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRevisionWithHttpMessagesAsync(subscriptionId, apiId, apiRevisionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a revision details of a particular revision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            /// <param name='apiRevisionId'>
            /// Apirevision Id
            /// </param>
            /// <param name='request'>
            /// The revision details to update
            /// </param>
            public static object UpdateRevision(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, System.Guid apiRevisionId, RevisionUpdateRequestModel request)
            {
                return operations.UpdateRevisionAsync(subscriptionId, apiId, apiRevisionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a revision details of a particular revision
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Subscription ID
            /// </param>
            /// <param name='apiId'>
            /// Api Id
            /// </param>
            /// <param name='apiRevisionId'>
            /// Apirevision Id
            /// </param>
            /// <param name='request'>
            /// The revision details to update
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateRevisionAsync(this IGatewayClient operations, System.Guid subscriptionId, System.Guid apiId, System.Guid apiRevisionId, RevisionUpdateRequestModel request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRevisionWithHttpMessagesAsync(subscriptionId, apiId, apiRevisionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
